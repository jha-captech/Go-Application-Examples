package app

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"

	"github.com/go-playground/validator/v10"
)

// user represents a user entity in the application.
type user struct {
	ID       uint   `json:"id"`
	Name     string `json:"name"     validate:"required,min=2,max=50"`
	Email    string `json:"email"    validate:"required,email"`
	Password string `json:"password" validate:"required,min=8,max=30"`
}

// problemDetail represents the structure for problem details as per RFC 7807.
type problemDetail struct {
	Title  string `json:"title"`  // A short, human-readable summary of the problem.
	Status int    `json:"status"` // The HTTP status code generated by the origin server.
	Detail string `json:"detail"` // A human-readable explanation specific to this occurrence of the problem.
}

// problemDetailValidation extends problemDetail to include invalid parameters for validation errors.
type problemDetailValidation struct {
	problemDetail
	InvalidParams []validationProblem `json:"invalidParams"` // A list of invalid parameters with error details.
}

// validationProblem describes a single validation error for a field.
type validationProblem struct {
	Field   string `json:"field"`
	Code    string `json:"code"`
	Message string `json:"message"`
}

// decodeValid decodes a model from an http request and performs validation on it.
// Returns the decoded model, a slice of validation problems, and an error if decoding or validation fails.
func decodeValid[T any](r *http.Request) (T, []validationProblem, error) {
	var v T
	if err := json.NewDecoder(r.Body).Decode(&v); err != nil {
		return v, []validationProblem{}, fmt.Errorf(
			"[in handlers.decodeValid] decode body failed: %w",
			err,
		)
	}

	problems, err := validate(&v)
	if err != nil {
		return v, []validationProblem{}, fmt.Errorf(
			"[in handlers.decodeValid] validate failed: %w",
			err,
		)
	}

	if len(problems) > 0 {
		validationProblems := make([]validationProblem, len(problems))
		for i, problem := range problems {
			validationProblems[i] = validationProblem{
				Field:   problem.Field(),
				Code:    problem.Tag(),
				Message: problem.Error(),
			}
		}

		return v, validationProblems, nil
	}

	return v, []validationProblem{}, nil
}

// validate validates the struct using the go-playground/validator package.
// Returns a slice of FieldError if validation fails, or an error if an invalid validation occurs.
func validate[T any](data *T, options ...validator.Option) ([]validator.FieldError, error) {
	v := validator.New(options...)
	if err := v.Struct(data); err != nil {
		var invalidValidationError *validator.InvalidValidationError
		if errors.As(err, &invalidValidationError) {
			return []validator.FieldError{}, fmt.Errorf(
				"[in handlers.validate] invalid validation error: %w",
				err,
			)
		}
		return err.(validator.ValidationErrors), nil
	}
	return []validator.FieldError{}, nil
}

// newValidationBadRequest creates a problemDetailValidation instance for a 400 Bad Request validation error.
func newValidationBadRequest(invalidParams []validationProblem) problemDetailValidation {
	return problemDetailValidation{
		problemDetail: problemDetail{
			Title:  "Bad Request",
			Status: 400,
			Detail: "The request contains invalid parameters.",
		},
		InvalidParams: invalidParams,
	}
}

// newInternalServerError creates a problemDetail instance for a 500 Internal Server Error.
func newInternalServerError() problemDetail {
	return problemDetail{
		Title:  "Internal Server Error",
		Status: 500,
		Detail: "An unexpected error occurred.",
	}
}
