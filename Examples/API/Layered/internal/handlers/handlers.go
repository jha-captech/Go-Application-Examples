package handlers

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"

	"github.com/go-playground/validator/v10"
	"go.opentelemetry.io/otel"
)

const name = "example.com/examples/api/layered/internal/handlers"

var tracer = otel.Tracer(name)

// ProblemDetail represents the structure for problem details as per RFC 7807.
type ProblemDetail struct {
	Title  string `json:"title"`  // A short, human-readable summary of the problem.
	Status int    `json:"status"` // The HTTP status code generated by the origin server.
	Detail string `json:"detail"` // A human-readable explanation specific to this occurrence of the problem.
}

type validationProblem struct {
	Field   string `json:"field"`
	Code    string `json:"code"`
	Message string `json:"message"`
}

type ProblemDetailValidation struct {
	ProblemDetail
	InvalidParams []validationProblem `json:"invalidParams"` // A list of invalid parameters with error details.
}

// decodeValid decodes a model from an http request and performs validation
// on it.
func decodeValid[T any](r *http.Request) (T, []validationProblem, error) {
	var v T
	if err := json.NewDecoder(r.Body).Decode(&v); err != nil {
		return v, []validationProblem{}, fmt.Errorf(
			"[in handlers.decodeValid] decode body failed: %w",
			err,
		)
	}
	problems, err := validate(&v)
	if err != nil {
		return v, []validationProblem{}, fmt.Errorf(
			"[in handlers.decodeValid] validate failed: %w",
			err,
		)
	}
	if len(problems) > 0 {
		validationProblems := make([]validationProblem, len(problems))
		for i, problem := range problems {
			validationProblems[i] = validationProblem{
				Field:   problem.Field(),
				Code:    problem.Tag(),
				Message: problem.Error(),
			}
		}
		return v, validationProblems, nil
	}
	return v, []validationProblem{}, nil
}

func validate[T any](data *T, options ...validator.Option) ([]validator.FieldError, error) {
	v := validator.New(options...)
	if err := v.Struct(data); err != nil {
		var invalidValidationError *validator.InvalidValidationError
		if errors.As(err, &invalidValidationError) {
			return []validator.FieldError{}, fmt.Errorf(
				"[in handlers.validate] invalid validation error: %w",
				err,
			)
		}
		return err.(validator.ValidationErrors), nil
	}
	return []validator.FieldError{}, nil
}

// NewValidationBadRequest creates a ProblemDetailValidation instance for a 400 Bad Request validation error.
func NewValidationBadRequest(invalidParams []validationProblem) ProblemDetailValidation {
	return ProblemDetailValidation{
		ProblemDetail: ProblemDetail{
			Title:  "Bad Request",
			Status: 400,
			Detail: "The request contains invalid parameters.",
		},
		InvalidParams: invalidParams,
	}
}

func NewInternalServerError() ProblemDetail {
	return ProblemDetail{
		Title:  "Internal Server Error",
		Status: 500,
		Detail: "An unexpected error occurred.",
	}
}
